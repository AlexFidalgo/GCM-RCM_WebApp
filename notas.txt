python -m venv webapp
webapp\Scripts\activate
pip install flask flask-cors pandas matplotlib cartopy

Since the app seems relatively simple (a few selection inputs and displaying images), Flask might be lighter and easier to set up.

**FLASK backend**

flask: Web framework to build the API.
flask-cors: Allows frontend requests from different origins.
pandas: For handling CSV data.
matplotlib & cartopy: To generate maps.

Run backend/app.py and access http://127.0.0.1:5000/
    - 127.0.0.1 (localhost): This is a loopback IP address, meaning it refers to the local machine. When you access 127.0.0.1, you are essentially talking to your own computer.
    - 5000 (port number): This is the default port Flask runs on. Ports allow multiple services (web servers, databases, etc.) to run on the same machine without conflicts.
    - / (root route): This refers to the default endpoint of your web application. Any request sent to this address will be handled by the corresponding route in Flask.

**REACT frontend**

npx create-vite frontend --template react
cd frontend
npm install
npm install axios react-router-dom
    - axios: For making API requests to Flask.
    - react-router-dom: To manage page navigation.

✅ src/ → Contains your React components and styles.
✅ public/ → For static assets.
✅ index.html → The main HTML file.
✅ vite.config.js → Vite configuration.
✅ package.json → Lists dependencies.
✅ App.jsx & main.jsx → The main React files.

App.jsx is the root React component that defines the UI of the application.
    - Contains React UI components
    - State Management: Uses useState hook for the counter
    - Asset Imports: Includes logos (SVG files) and CSS styling
    - JSX Structure: Defines the component's visual layout
    - Interactive Element: Button that updates the count state
    - Hot Module Replacement (HMR): Mentioned in the edit message (auto-refresh during development)

main.jsx is the entry point, the starting point of your React application that connects React to the DOM.
    - Setup/configuration

*** Fetch and display regions from the Flask API ***

mkdir src/components
src/components/RegionSelector.jsx
 It will:
- Fetch regions from the Flask API (/list_regions).
- Display a dropdown menu for the user to select a region.
- Pass the selected region to the parent component (Calls onRegionSelect(region) whenever the user selects a region (so the parent component gets updated).)

 Integrate RegionSelector.jsx in App.jsx:
 ```
import { useState } from "react";
import RegionSelector from "./components/RegionSelector";

function App() {
    const [selectedRegion, setSelectedRegion] = useState("");

    return (
        <div>
            <h1>Climate Data Viewer</h1>
            <RegionSelector onRegionSelect={setSelectedRegion} />
            {selectedRegion && <p>Selected Region: {selectedRegion}</p>}
        </div>
    );
}

export default App;
 ```
Now App.jsx
- Uses the RegionSelector component to let users select a region.
- Stores the selected region in useState.
- Displays the selected region on the screen.


*Accessing*

- Start the Flask backend
- Open a second terminal and navigate to your frontend folder:
    `cd frontend`
    `npm run dev`